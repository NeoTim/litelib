{
  "api/Unosquare.Labs.LiteLib.LiteIndexAttribute.html": {
    "href": "api/Unosquare.Labs.LiteLib.LiteIndexAttribute.html",
    "title": "Class LiteIndexAttribute | Unosquare LiteLib",
    "keywords": "Class LiteIndexAttribute Hints the DDL generator that an index needs to be created. Inheritance System.Object System.Attribute LiteIndexAttribute Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace :Unosquare.Labs.LiteLib Assembly :cs.temp.dll.dll Syntax public class LiteIndexAttribute : Attribute, _Attribute See Also System.Attribute"
  },
  "api/Unosquare.Labs.LiteLib.LiteUniqueAttribute.html": {
    "href": "api/Unosquare.Labs.LiteLib.LiteUniqueAttribute.html",
    "title": "Class LiteUniqueAttribute | Unosquare LiteLib",
    "keywords": "Class LiteUniqueAttribute Hints the DDL generator that a UNIQUE index needs to be created. Inheritance System.Object System.Attribute LiteUniqueAttribute Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace :Unosquare.Labs.LiteLib Assembly :cs.temp.dll.dll Syntax public class LiteUniqueAttribute : Attribute, _Attribute See Also System.Attribute"
  },
  "api/Unosquare.Labs.LiteLib.ILiteDbSet-1.html": {
    "href": "api/Unosquare.Labs.LiteLib.ILiteDbSet-1.html",
    "title": "Interface ILiteDbSet<T> | Unosquare LiteLib",
    "keywords": "Interface ILiteDbSet<T> Provides typed access to querying the database Inherited Members ILiteDbSet.EntityType ILiteDbSet.TableName ILiteDbSet.TableDefinition ILiteDbSet.SelectDefinition ILiteDbSet.InsertDefinition ILiteDbSet.UpdateDefinition ILiteDbSet.DeleteDefinition ILiteDbSet.Context Namespace :Unosquare.Labs.LiteLib Assembly :cs.temp.dll.dll Syntax public interface ILiteDbSet<T> : ILiteDbSet where T : ILiteModel Type Parameters Name Description T Methods Count() Counts the total number of rows in the table Declaration int Count() Returns Type Description System.Int32 CountAsync() Provides and asynchronous counterpart to the Count method Declaration Task<int> CountAsync() Returns Type Description System.Threading.Tasks.Task < System.Int32 > Delete(T) Deletes the specified entity. RowId must be set. Declaration int Delete(T entity) Parameters Type Name Description T entity Returns Type Description System.Int32 DeleteAsync(T) Provides and asynchronous counterpart to the Delete method Declaration Task<int> DeleteAsync(T entity) Parameters Type Name Description T entity The entity. Returns Type Description System.Threading.Tasks.Task < System.Int32 > Insert(T) Inserts the specified entity. Declaration int Insert(T entity) Parameters Type Name Description T entity Returns Type Description System.Int32 InsertAsync(T) Provides and asynchronous counterpart to the Insert method Declaration Task<int> InsertAsync(T entity) Parameters Type Name Description T entity The entity. Returns Type Description System.Threading.Tasks.Task < System.Int32 > Select(String, Object) Selects a set of entities from the database. Example whereText = \"X = @X\" and whereParames = new { X = \"hello\" } Declaration IEnumerable<T> Select(string whereText, object whereParams) Parameters Type Name Description System.String whereText The where text. System.Object whereParams The where parameters. Returns Type Description System.Collections.Generic.IEnumerable <T> SelectAll() Selects all entities from the database. Declaration IEnumerable<T> SelectAll() Returns Type Description System.Collections.Generic.IEnumerable <T> SelectAllAsync() Selects all asynchronous. Declaration Task<IEnumerable<T>> SelectAllAsync() Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IEnumerable <T>> SelectAsync(String, Object) Provides and asynchronous counterpart to the Select method Declaration Task<IEnumerable<T>> SelectAsync(string whereText, object whereParams) Parameters Type Name Description System.String whereText The where text. System.Object whereParams The where parameters. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IEnumerable <T>> Single(Int64) Selects a single entity from the databse given its row id. Declaration T Single(long rowId) Parameters Type Name Description System.Int64 rowId The row identifier. Returns Type Description T SingleAsync(Int64) Provides and asynchronous counterpart to the Single method Declaration Task<T> SingleAsync(long rowId) Parameters Type Name Description System.Int64 rowId The row identifier. Returns Type Description System.Threading.Tasks.Task <T> Update(T) Updates the specified entity in a non optimistic concurrency manner. RowId must be set. Declaration int Update(T entity) Parameters Type Name Description T entity Returns Type Description System.Int32 UpdateAsync(T) Provides and asynchronous counterpart to the Update method Declaration Task<int> UpdateAsync(T entity) Parameters Type Name Description T entity The entity. Returns Type Description System.Threading.Tasks.Task < System.Int32 >"
  },
  "api/Unosquare.Labs.LiteLib.ILiteModel.html": {
    "href": "api/Unosquare.Labs.LiteLib.ILiteModel.html",
    "title": "Interface ILiteModel | Unosquare LiteLib",
    "keywords": "Interface ILiteModel Provides minimum contract on which a class can be considered a model for a SQLite entity set. Namespace :Unosquare.Labs.LiteLib Assembly :cs.temp.dll.dll Syntax public interface ILiteModel Properties RowId Gets or sets the native SQLite row identifier. Declaration long RowId { get; set; } Property Value Type Description System.Int64"
  },
  "api/Unosquare.Labs.LiteLib.LiteDbSet-1.html": {
    "href": "api/Unosquare.Labs.LiteLib.LiteDbSet-1.html",
    "title": "Class LiteDbSet<T> | Unosquare LiteLib",
    "keywords": "Class LiteDbSet<T> Represents a ILiteDbSet implementation Inheritance System.Object LiteDbSet<T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Unosquare.Labs.LiteLib Assembly :cs.temp.dll.dll Syntax public class LiteDbSet<T> : ILiteDbSet<T>, ILiteDbSet where T : ILiteModel, new () Type Parameters Name Description T Constructors LiteDbSet() Initializes a new instance of the LiteDbSet<T> class. Declaration public LiteDbSet() Properties Context Gets or sets the parent set context. Declaration public LiteDbContext Context { get; set; } Property Value Type Description LiteDbContext Implements ILiteDbSet.Context DeleteDefinition Gets the delete command definition. Declaration public string DeleteDefinition { get; protected set; } Property Value Type Description System.String Implements ILiteDbSet.DeleteDefinition EntityType Gets or sets the type of the entity. Declaration public Type EntityType { get; set; } Property Value Type Description System.Type Implements ILiteDbSet.EntityType InsertDefinition Gets the insert command definition. Declaration public string InsertDefinition { get; protected set; } Property Value Type Description System.String Implements ILiteDbSet.InsertDefinition PropertyNames Gets or sets the property names. Declaration public string[] PropertyNames { get; set; } Property Value Type Description System.String [] SelectDefinition Gets the select command definition. Declaration public string SelectDefinition { get; protected set; } Property Value Type Description System.String Implements ILiteDbSet.SelectDefinition TableDefinition Gets the table definition. Declaration public string TableDefinition { get; protected set; } Property Value Type Description System.String Implements ILiteDbSet.TableDefinition TableName Gets the name of the data-backing table. Declaration public string TableName { get; protected set; } Property Value Type Description System.String Implements ILiteDbSet.TableName UpdateDefinition Gets the update command definition. Declaration public string UpdateDefinition { get; protected set; } Property Value Type Description System.String Implements ILiteDbSet.UpdateDefinition Methods Count() Counts the total number of rows in the table Declaration public int Count() Returns Type Description System.Int32 Implements ILiteDbSet<T>.Count() CountAsync() Provides and asynchronous counterpart to the Count method Declaration public Task<int> CountAsync() Returns Type Description System.Threading.Tasks.Task < System.Int32 > Implements ILiteDbSet<T>.CountAsync() Delete(T) Deletes the specified entity. RowId must be set. Declaration public int Delete(T entity) Parameters Type Name Description T entity Returns Type Description System.Int32 Implements ILiteDbSet<T>.Delete(T) Exceptions Type Condition System.ArgumentException DeleteAsync(T) Provides and asynchronous counterpart to the Delete method Declaration public Task<int> DeleteAsync(T entity) Parameters Type Name Description T entity The entity. Returns Type Description System.Threading.Tasks.Task < System.Int32 > Implements ILiteDbSet<T>.DeleteAsync(T) Exceptions Type Condition System.ArgumentException FirstOrDefault(String, Object) Firsts the or default. Declaration public T FirstOrDefault(string fieldName, object fieldValue) Parameters Type Name Description System.String fieldName Name of the field. System.Object fieldValue The field value. Returns Type Description T Insert(T) Inserts the specified entity. Declaration public int Insert(T entity) Parameters Type Name Description T entity Returns Type Description System.Int32 Implements ILiteDbSet<T>.Insert(T) InsertAsync(T) Provides and asynchronous counterpart to the Insert method Declaration public Task<int> InsertAsync(T entity) Parameters Type Name Description T entity The entity. Returns Type Description System.Threading.Tasks.Task < System.Int32 > Implements ILiteDbSet<T>.InsertAsync(T) InsertRange(IEnumerable<T>) Inserts the specified entities. Declaration public void InsertRange(IEnumerable<T> entities) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> entities The entities. Select(String, Object) Selects a set of entities from the database. Example whereText = \"X = @X\" and whereParames = new { X = \"hello\" } Declaration public IEnumerable<T> Select(string whereText, object whereParams = null) Parameters Type Name Description System.String whereText The where text. System.Object whereParams The where parameters. Returns Type Description System.Collections.Generic.IEnumerable <T> Implements ILiteDbSet<T>.Select(String, Object) SelectAll() Selects all entities from the database. Declaration public IEnumerable<T> SelectAll() Returns Type Description System.Collections.Generic.IEnumerable <T> Implements ILiteDbSet<T>.SelectAll() SelectAllAsync() Selects all asynchronous. Declaration public Task<IEnumerable<T>> SelectAllAsync() Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IEnumerable <T>> Implements ILiteDbSet<T>.SelectAllAsync() SelectAsync(String, Object) Provides and asynchronous counterpart to the Select method Declaration public Task<IEnumerable<T>> SelectAsync(string whereText, object whereParams = null) Parameters Type Name Description System.String whereText The where text. System.Object whereParams The where parameters. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IEnumerable <T>> Implements ILiteDbSet<T>.SelectAsync(String, Object) Single(Int64) Selects a single entity from the database given its row id. Declaration public T Single(long rowId) Parameters Type Name Description System.Int64 rowId The row identifier. Returns Type Description T Implements ILiteDbSet<T>.Single(Int64) SingleAsync(Int64) Provides and asynchronous counterpart to the Single method Declaration public Task<T> SingleAsync(long rowId) Parameters Type Name Description System.Int64 rowId The row identifier. Returns Type Description System.Threading.Tasks.Task <T> Implements ILiteDbSet<T>.SingleAsync(Int64) Update(T) Updates the specified entity in a non optimistic concurrency manner. RowId must be set. Declaration public int Update(T entity) Parameters Type Name Description T entity Returns Type Description System.Int32 Implements ILiteDbSet<T>.Update(T) UpdateAsync(T) Provides and asynchronous counterpart to the Update method Declaration public Task<int> UpdateAsync(T entity) Parameters Type Name Description T entity The entity. Returns Type Description System.Threading.Tasks.Task < System.Int32 > Implements ILiteDbSet<T>.UpdateAsync(T) Events OnAfterDelete Occurs when [on after delete]. Declaration public event EventHandler<EntityEventArgs<T>> OnAfterDelete Event Type Type Description System.EventHandler < EntityEventArgs <T>> OnAfterInsert Occurs when [on after insert]. Declaration public event EventHandler<EntityEventArgs<T>> OnAfterInsert Event Type Type Description System.EventHandler < EntityEventArgs <T>> OnAfterUpdate Occurs when [on after update]. Declaration public event EventHandler<EntityEventArgs<T>> OnAfterUpdate Event Type Type Description System.EventHandler < EntityEventArgs <T>> OnBeforeDelete Occurs when [on before delete]. Declaration public event EventHandler<EntityEventArgs<T>> OnBeforeDelete Event Type Type Description System.EventHandler < EntityEventArgs <T>> OnBeforeInsert Occurs when [on before insert]. Declaration public event EventHandler<EntityEventArgs<T>> OnBeforeInsert Event Type Type Description System.EventHandler < EntityEventArgs <T>> OnBeforeUpdate Occurs when [on before update]. Declaration public event EventHandler<EntityEventArgs<T>> OnBeforeUpdate Event Type Type Description System.EventHandler < EntityEventArgs <T>> See Also ILiteDbSet <T>"
  },
  "api/Unosquare.Labs.LiteLib.LiteModel.html": {
    "href": "api/Unosquare.Labs.LiteLib.LiteModel.html",
    "title": "Class LiteModel | Unosquare LiteLib",
    "keywords": "Class LiteModel Base model class for ISQLiteEntity. Inherit from this model if you don't want to implement the RowId property. Inheritance System.Object LiteModel Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Unosquare.Labs.LiteLib Assembly :cs.temp.dll.dll Syntax public abstract class LiteModel : ILiteModel Properties RowId Gets or sets the native SQLite row identifier. Declaration public long RowId { get; set; } Property Value Type Description System.Int64 Implements ILiteModel.RowId"
  },
  "api/Unosquare.Labs.LiteLib.html": {
    "href": "api/Unosquare.Labs.LiteLib.html",
    "title": "Namespace Unosquare.Labs.LiteLib | Unosquare LiteLib",
    "keywords": "Namespace Unosquare.Labs.LiteLib Classes EntityEventArgs<T> Represents a Entity EventArg Extensions Extension methods LiteDbContext A base class containing all the functionality to perform data operations on Entity Sets LiteDbSet<T> Represents a ILiteDbSet implementation LiteIndexAttribute Hints the DDL generator that an index needs to be created. LiteModel Base model class for ISQLiteEntity. Inherit from this model if you don't want to implement the RowId property. LiteUniqueAttribute Hints the DDL generator that a UNIQUE index needs to be created. Interfaces ILiteDbSet Provides basic DDL and CRUD command definitions and a DI-supplied Context ILiteDbSet<T> Provides typed access to querying the database ILiteModel Provides minimum contract on which a class can be considered a model for a SQLite entity set."
  },
  "api/toc.html": {
    "href": "api/toc.html",
    "title": "Table of Content",
    "keywords": ""
  },
  "toc.html": {
    "href": "toc.html",
    "title": "Table of Content",
    "keywords": ""
  },
  "README.html": {
    "href": "README.html",
    "title": "LiteLib | Unosquare LiteLib",
    "keywords": "LiteLib A cool little wrapper for SQLite based on Dapper from Unosquare Labs -- It's also free and MIT-licensed ⭐ Please star this project if you find it useful! LiteLib is a library that helps you get the job done quickly and easily by defining POCO classes and turns those classes into SQLite-mapped tables. You define a database context and LiteLib will automatically create the necessary SQLite tables for your context. You will then be able to easily query, insert, update or delete records from the database tables via the database context you just defined. LiteLib is not intended to be a replacement for Entity Framework, but rather a lighter alternative that saves you the work of creating tables, managing connection intances, logging SQL commands, and still allows you to use Dapper-style querying. So, if you like Entity Framework, but you prefer the speed of Dapper, and you are using SQLite for your project, then we hope you'll love LiteLib! Stuff that LiteLib does very well : Creates your database files and tables that map to classes and properties of your objects. Automatically gives you access to predefined SELECT , UPDATE , INSERT and DELETE commands for each of your classes. Automatically provides you with a simple and extensible data access layer. Automatically manages connection intances. Provides you with a log of SQL commands executed against your database file. Stuff that LiteLib does not cover: Migrations of any kind. You'll have to drop and recreate the DB file if your schema changes or migrate it manually Navigation properties or relationships. You'll have to implement and ensure consistency of data relations manually -- which BTW, it's not hard at all and lets you write faster, lighter code. Automatic transactions or changesets. You'll have to BeginTransaction and Commit manually. The Data context class you define simply exposes the underlying Dapper connection. Installation You can install LiteLib via NuGet Package Manager as follows: PM> Install-Package LiteLib Usage We designed LiteLib to be extremely easy to use. There are 3 steps you need to follow. Create your model classes. All model classes must extend from LiteModel . There are a few class and property attributes that LiteLib understands. See the examples below. Create your context class. It must extend LiteDbContext , and it must expose your LiteDbSet classes Use your context class. Example provided in the following section. Example Create your model class. Use the Table attribute to specify the name of the table you want to map your model to. Also note we inherit from LiteModel . If you wish to create a unique index on a column, use the LiteUnique attribute on a property. If you wish to index a column, then simply use the LiteIndex attribute. Please note properties with complex datatypes will not be mapped to the database. namespace Models { using System; using System.ComponentModel.DataAnnotations.Schema; using Unosquare.Labs.LiteLib; [Table(\"ClientAccounts\")] public class ClientAccount : LiteModel { [LiteUnique] public string Username { get; set; } public string Password { get; set; } [LiteIndex] public bool IsUsernameIP { get; set; } [LiteIndex] public long RelayServerId { get; set; } public DateTime DateCreatedUtc { get; set; } public DateTime LastAccessDateUtc { get; set; } public DateTime? LockedOutDateUtc { get; set; } public int FailedLoginAttempts { get; set; } } } Next, create your database context class. Extend LiteDbContext and expose any number of tables via properties of the generic type LiteDbSet<> . A context should always be disposable so the recommendation is to query your database inside a using block of statements. namespace Models { using Labs.LiteLib; public class AppDbContext : LiteDbContext { public AppDbContext() : base(\"mydbfile.db\") { // map this context to the database file mydbfile.db } public virtual LiteDbSet<ClientAccount> ClientAccounts { get; set; } } } Finally, use your database context class. For example, to query your database by username asynchronously you can just do the following: using (var db = new AppDbContext()) { var accounts = await db.ClientAccounts.SelectAsync( $\"{nameof(ClientAccount.Username)} = @{nameof(ClientAccount.Username)}\", new { Username = \"someuser\" }); } At this point it should be easy for you to see that you can esily extend your data access logic via extension methods or by extending the LiteDbSet<> class and exposing it as a property in your database context class. That's it! Happy coding!"
  },
  "api/Unosquare.Labs.LiteLib.EntityEventArgs-1.html": {
    "href": "api/Unosquare.Labs.LiteLib.EntityEventArgs-1.html",
    "title": "Class EntityEventArgs<T> | Unosquare LiteLib",
    "keywords": "Class EntityEventArgs<T> Represents a Entity EventArg Inheritance System.Object System.EventArgs EntityEventArgs<T> Inherited Members System.EventArgs.Empty System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Unosquare.Labs.LiteLib Assembly :cs.temp.dll.dll Syntax public class EntityEventArgs<T> : EventArgs where T : ILiteModel Type Parameters Name Description T Constructors EntityEventArgs(T, ILiteDbSet<T>) Initializes a new instance of the EntityEventArgs<T> class. Declaration public EntityEventArgs(T entity, ILiteDbSet<T> dbSet) Parameters Type Name Description T entity The entity. ILiteDbSet <T> dbSet The database set. Properties Cancel Gets or sets a value indicating whether this EntityEventArgs<T> is cancel. Declaration public bool Cancel { get; set; } Property Value Type Description System.Boolean true if cancel; otherwise, false . DbSet Gets or sets the database set. Declaration public ILiteDbSet<T> DbSet { get; protected set; } Property Value Type Description ILiteDbSet <T> The database set. Entity Gets or sets the entity. Declaration public T Entity { get; protected set; } Property Value Type Description T The entity. See Also System.EventArgs"
  },
  "api/Unosquare.Labs.LiteLib.Extensions.html": {
    "href": "api/Unosquare.Labs.LiteLib.Extensions.html",
    "title": "Class Extensions | Unosquare LiteLib",
    "keywords": "Class Extensions Extension methods Inheritance System.Object Extensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Unosquare.Labs.LiteLib Assembly :cs.temp.dll.dll Syntax public static class Extensions Methods GetTypeMapping(Type) Gets the type mapping. Declaration public static string GetTypeMapping(this Type propertyType) Parameters Type Name Description System.Type propertyType Type of the property. Returns Type Description System.String ToSQLiteUtcDate(DateTime) Transform a DateTime to a SQLite UTC date. Declaration public static DateTime ToSQLiteUtcDate(this DateTime utcDate) Parameters Type Name Description System.DateTime utcDate The UTC date. Returns Type Description System.DateTime"
  },
  "api/Unosquare.Labs.LiteLib.ILiteDbSet.html": {
    "href": "api/Unosquare.Labs.LiteLib.ILiteDbSet.html",
    "title": "Interface ILiteDbSet | Unosquare LiteLib",
    "keywords": "Interface ILiteDbSet Provides basic DDL and CRUD command definitions and a DI-supplied Context Namespace :Unosquare.Labs.LiteLib Assembly :cs.temp.dll.dll Syntax public interface ILiteDbSet Properties Context Gets or sets the parent set context. Declaration LiteDbContext Context { get; set; } Property Value Type Description LiteDbContext DeleteDefinition Gets the delete command definition. Declaration string DeleteDefinition { get; } Property Value Type Description System.String EntityType Gets or sets the type of the entity. Declaration Type EntityType { get; set; } Property Value Type Description System.Type InsertDefinition Gets the insert command definition. Declaration string InsertDefinition { get; } Property Value Type Description System.String SelectDefinition Gets the select command definition. Declaration string SelectDefinition { get; } Property Value Type Description System.String TableDefinition Gets the table definition. Declaration string TableDefinition { get; } Property Value Type Description System.String TableName Gets the name of the data-backing table. Declaration string TableName { get; } Property Value Type Description System.String UpdateDefinition Gets the update command definition. Declaration string UpdateDefinition { get; } Property Value Type Description System.String"
  },
  "api/Unosquare.Labs.LiteLib.LiteDbContext.html": {
    "href": "api/Unosquare.Labs.LiteLib.LiteDbContext.html",
    "title": "Class LiteDbContext | Unosquare LiteLib",
    "keywords": "Class LiteDbContext A base class containing all the functionality to perform data operations on Entity Sets Inheritance System.Object LiteDbContext Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Unosquare.Labs.LiteLib Assembly :cs.temp.dll.dll Syntax public abstract class LiteDbContext : IDisposable Constructors LiteDbContext(String, Boolean) Initializes a new instance of the LiteDbContext class. Declaration protected LiteDbContext(string databaseFilePath, bool enabledLog = true) Parameters Type Name Description System.String databaseFilePath The database file path. System.Boolean enabledLog if set to true [enabled log]. Properties Connection Gets the underlying SQLite connection. Declaration public IDbConnection Connection { get; } Property Value Type Description IDbConnection EnabledLog Gets or sets a value indicating whether [enabled log]. Declaration public bool EnabledLog { get; set; } Property Value Type Description System.Boolean Instances Gets all instances of Lite DB contexts that are instantiated and not disposed. Declaration public static ReadOnlyCollection<LiteDbContext> Instances { get; } Property Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < LiteDbContext > UniqueId Gets the unique identifier of this context. Declaration public Guid UniqueId { get; protected set; } Property Value Type Description System.Guid Methods Delete(Object) Deletes the specified entity without triggering events. Declaration public int Delete(object entity) Parameters Type Name Description System.Object entity The entity. Returns Type Description System.Int32 DeleteAsync(Object) Deletes the asynchronous without triggering events. Declaration public Task<int> DeleteAsync(object entity) Parameters Type Name Description System.Object entity The entity. Returns Type Description System.Threading.Tasks.Task < System.Int32 > Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Implements System.IDisposable.Dispose() GetSetNames() Gets the set names. Declaration public string[] GetSetNames() Returns Type Description System.String [] Insert(Object) Inserts the specified entity without triggering events. Declaration public int Insert(object entity) Parameters Type Name Description System.Object entity The entity. Returns Type Description System.Int32 Exceptions Type Condition System.ArgumentOutOfRangeException entity - The object type must be registered as ILiteDbSet InsertAsync(Object) Inserts the asynchronous without triggering events. Declaration public Task<int> InsertAsync(object entity) Parameters Type Name Description System.Object entity The entity. Returns Type Description System.Threading.Tasks.Task < System.Int32 > Query<TEntity>(String, Object) Queries the specified set. Declaration public IEnumerable<TEntity> Query<TEntity>(string commandText, object whereParams = null) Parameters Type Name Description System.String commandText The command text. System.Object whereParams The where parameters. Returns Type Description System.Collections.Generic.IEnumerable <TEntity> Type Parameters Name Description TEntity The type of the entity. QueryAsync<TEntity>(String, Object) Queries the asynchronous. Declaration public Task<IEnumerable<TEntity>> QueryAsync<TEntity>(string commandText, object whereParams = null) Parameters Type Name Description System.String commandText The command text. System.Object whereParams The where parameters. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IEnumerable <TEntity>> Type Parameters Name Description TEntity The type of the entity. Select<TEntity>(ILiteDbSet, String, Object) Selects the specified set. Declaration public IEnumerable<TEntity> Select<TEntity>(ILiteDbSet set, string whereText, object whereParams = null) Parameters Type Name Description ILiteDbSet set The set. System.String whereText The where text. System.Object whereParams The where parameters. Returns Type Description System.Collections.Generic.IEnumerable <TEntity> Type Parameters Name Description TEntity The type of the entity. SelectAsync<TEntity>(ILiteDbSet, String, Object) Selects the asynchronous. Declaration public Task<IEnumerable<TEntity>> SelectAsync<TEntity>(ILiteDbSet set, string whereText, object whereParams = null) Parameters Type Name Description ILiteDbSet set The set. System.String whereText The where text. System.Object whereParams The where parameters. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IEnumerable <TEntity>> Type Parameters Name Description TEntity The type of the entity. Set(Type) Returns a non-generic ILiteDbSet instance for access to entities of the given type in the context and the underlying store. Declaration public ILiteDbSet Set(Type entityType) Parameters Type Name Description System.Type entityType Type of the entity. Returns Type Description ILiteDbSet Exceptions Type Condition System.ArgumentOutOfRangeException Set<TEntity>() Returns a ILiteDbSet instance for access to entities of the given type in the context and the underlying store. Declaration public ILiteDbSet Set<TEntity>() Returns Type Description ILiteDbSet Type Parameters Name Description TEntity Entity type Update(Object) Updates the specified entity without triggering events. Declaration public int Update(object entity) Parameters Type Name Description System.Object entity The entity. Returns Type Description System.Int32 UpdateAsync(Object) Updates the asynchronous without triggering events. Declaration public Task<int> UpdateAsync(object entity) Parameters Type Name Description System.Object entity The entity. Returns Type Description System.Threading.Tasks.Task < System.Int32 > VaccuumDatabaseAsync() Vacuums the database asynchronously. Declaration public Task VaccuumDatabaseAsync() Returns Type Description System.Threading.Tasks.Task Events OnDatabaseCreated Occurs when [on database created]. Declaration public event EventHandler OnDatabaseCreated Event Type Type Description System.EventHandler See Also System.IDisposable"
  }
}