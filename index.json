{
  "api/Unosquare.Labs.LiteLib.ILiteDbSet-1.html": {
    "href": "api/Unosquare.Labs.LiteLib.ILiteDbSet-1.html",
    "title": "Interface ILiteDbSet<T> | Unosquare LiteLib",
    "keywords": "Interface ILiteDbSet<T> Provides typed access to querying the database. Inherited Members ILiteDbSet.EntityType ILiteDbSet.TableName ILiteDbSet.TableDefinition ILiteDbSet.SelectDefinition ILiteDbSet.InsertDefinition ILiteDbSet.UpdateDefinition ILiteDbSet.DeleteDefinition ILiteDbSet.DeleteDefinitionWhere ILiteDbSet.AnyDefinition ILiteDbSet.Context ILiteDbSet.CountAsync() ILiteDbSet.Count() ILiteDbSet.CountAsync(String, Object) ILiteDbSet.Count(String, Object) ILiteDbSet.Any() ILiteDbSet.Any(String, Object) ILiteDbSet.AnyAsync(String, Object) ILiteDbSet.AnyAsync() Namespace : Unosquare.Labs.LiteLib Syntax public interface ILiteDbSet<T> : ILiteDbSet where T : ILiteModel Type Parameters Name Description T The type of LiteModel. Methods Delete(T) Deletes the specified entity. RowId must be set. Declaration int Delete(T entity) Parameters Type Name Description T entity The entity. Returns Type Description Int32 The number of rows deleted. Delete(String, Object) Deletes the specified where text. Example whereText = \"X = @X&quot; and whereParams = new { X = \"hello\" }. Declaration int Delete(string whereText, object whereParams) Parameters Type Name Description String whereText The where text. Object whereParams The where parameters. Returns Type Description Int32 A Enumerable with generic type. DeleteAsync(T) Provides and asynchronous counterpart to the Delete method. Declaration Task<int> DeleteAsync(T entity) Parameters Type Name Description T entity The entity. Returns Type Description Task < Int32 > A Task with the number of rows deleted. DeleteAsync(String, Object) Deletes the asynchronous. Example whereText = \"X = @X&quot; and whereParams = new { X = \"hello\" }. Declaration Task<int> DeleteAsync(string whereText, object whereParams) Parameters Type Name Description String whereText The where text. Object whereParams The where parameters. Returns Type Description Task < Int32 > A Task of type Enumerable with a generic type. FirstOrDefault(String, Object) Firsts the or default. Declaration T FirstOrDefault(string fieldName, object fieldValue) Parameters Type Name Description String fieldName Name of the field. Object fieldValue The field value. Returns Type Description T A generic type. FirstOrDefaultAsync(String, Object) Firsts the or default asynchronous. Declaration Task<T> FirstOrDefaultAsync(string fieldName, object fieldValue) Parameters Type Name Description String fieldName Name of the field. Object fieldValue The field value. Returns Type Description Task <T> A Task with a generic type. Insert(T) Inserts the specified entity. Declaration int Insert(T entity) Parameters Type Name Description T entity The entity. Returns Type Description Int32 The number of rows inserted. InsertAsync(T) Provides and asynchronous counterpart to the Insert method. Declaration Task<int> InsertAsync(T entity) Parameters Type Name Description T entity The entity. Returns Type Description Task < Int32 > A Task with the number of rows inserted. InsertRange(IEnumerable<T>) Inserts the specified entities. Declaration void InsertRange(IEnumerable<T> entities) Parameters Type Name Description IEnumerable <T> entities The entities. Exceptions Type Condition ArgumentNullException entities. Select(String, Object) Selects a set of entities from the database. Example whereText = \"X = @X&quot; and whereParams = new { X = \"hello\" }. Declaration IEnumerable<T> Select(string whereText, object whereParams) Parameters Type Name Description String whereText The where text. Object whereParams The where parameters. Returns Type Description IEnumerable <T> A Enumerable with generic type. SelectAll() Selects all entities from the database. Declaration IEnumerable<T> SelectAll() Returns Type Description IEnumerable <T> A Enumerable with generic type. SelectAllAsync() Selects all asynchronous. Declaration Task<IEnumerable<T>> SelectAllAsync() Returns Type Description Task < IEnumerable <T>> A Task of type Enumerable with a generic type. SelectAsync(String, Object) Provides and asynchronous counterpart to the Select method. Declaration Task<IEnumerable<T>> SelectAsync(string whereText, object whereParams) Parameters Type Name Description String whereText The where text. Object whereParams The where parameters. Returns Type Description Task < IEnumerable <T>> A Task of type Enumerable with a generic type. Single(Int64) Selects a single entity from the database given its row id. Declaration T Single(long rowId) Parameters Type Name Description Int64 rowId The row identifier. Returns Type Description T A generic type. SingleAsync(Int64) Provides and asynchronous counterpart to the Single method. Declaration Task<T> SingleAsync(long rowId) Parameters Type Name Description Int64 rowId The row identifier. Returns Type Description Task <T> A Task with a generic type. Update(T) Updates the specified entity in a non optimistic concurrency manner. RowId must be set. Declaration int Update(T entity) Parameters Type Name Description T entity The entity. Returns Type Description Int32 The number of rows updated. UpdateAsync(T) Provides and asynchronous counterpart to the Update method. Declaration Task<int> UpdateAsync(T entity) Parameters Type Name Description T entity The entity. Returns Type Description Task < Int32 > A Task with the number of rows updated. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.Labs.LiteLib.LiteDbContext.html": {
    "href": "api/Unosquare.Labs.LiteLib.LiteDbContext.html",
    "title": "Class LiteDbContext | Unosquare LiteLib",
    "keywords": "Class LiteDbContext A base class containing all the functionality to perform data operations on Entity Sets. Inheritance Object LiteDbContext Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.Labs.LiteLib Syntax public abstract class LiteDbContext : IDisposable Constructors LiteDbContext(String, Boolean) Initializes a new instance of the LiteDbContext class. Declaration protected LiteDbContext(string databaseFilePath, bool enabledLog = true) Parameters Type Name Description String databaseFilePath The database file path. Boolean enabledLog if set to true [enabled log]. Properties Connection Gets the underlying SQLite connection. Declaration public IDbConnection Connection { get; } Property Value Type Description IDbConnection EnabledLog Gets or sets a value indicating whether [enabled log]. Declaration public bool EnabledLog { get; set; } Property Value Type Description Boolean Instances Gets all instances of Lite DB contexts that are instantiated and not disposed. Declaration public static ReadOnlyCollection<LiteDbContext> Instances { get; } Property Value Type Description ReadOnlyCollection < LiteDbContext > UniqueId Gets the unique identifier of this context. Declaration public Guid UniqueId { get; protected set; } Property Value Type Description Guid Methods Delete(Object) Deletes the specified entity without triggering events. Declaration public int Delete(object entity) Parameters Type Name Description Object entity The entity. Returns Type Description Int32 The affected rows count. Delete(ILiteDbSet, String, Object) Deletes the specified set. Declaration public int Delete(ILiteDbSet set, string whereText, object whereParams = null) Parameters Type Name Description ILiteDbSet set The set. String whereText The where text. Object whereParams The where parameters. Returns Type Description Int32 A count for affected rows. DeleteAsync(Object) Deletes the asynchronous without triggering events. Declaration public Task<int> DeleteAsync(object entity) Parameters Type Name Description Object entity The entity. Returns Type Description Task < Int32 > A Task with the affected rows count. DeleteAsync(ILiteDbSet, String, Object) Deletes the asynchronous. Declaration public Task<int> DeleteAsync(ILiteDbSet set, string whereText, object whereParams = null) Parameters Type Name Description ILiteDbSet set The set. String whereText The where text. Object whereParams The where parameters. Returns Type Description Task < Int32 > A count for affected rows. Dispose() Declaration public void Dispose() Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration public void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. GetSetNames() Gets the set names. Declaration public string[] GetSetNames() Returns Type Description String [] An array of strings of the entities. Insert(Object) Inserts the specified entity without triggering events. Declaration public int Insert(object entity) Parameters Type Name Description Object entity The entity. Returns Type Description Int32 The number of rows inserted. Exceptions Type Condition ArgumentOutOfRangeException entity - The object type must be registered as ILiteDbSet. InsertAsync(Object) Inserts the asynchronous without triggering events. Declaration public Task<int> InsertAsync(object entity) Parameters Type Name Description Object entity The entity. Returns Type Description Task < Int32 > A Task with the total number of rows inserted. Query<TEntity>(String, Object) Queries the specified set. Declaration public IEnumerable<TEntity> Query<TEntity>(string commandText, object whereParams = null) Parameters Type Name Description String commandText The command text. Object whereParams The where parameters. Returns Type Description IEnumerable <TEntity> An enumerable of the type of the entity. Type Parameters Name Description TEntity The type of the entity. QueryAsync<TEntity>(String, Object) Queries the asynchronous. Declaration public Task<IEnumerable<TEntity>> QueryAsync<TEntity>(string commandText, object whereParams = null) Parameters Type Name Description String commandText The command text. Object whereParams The where parameters. Returns Type Description Task < IEnumerable <TEntity>> A Task with an enumerable of the type of the entity. Type Parameters Name Description TEntity The type of the entity. Select<TEntity>(ILiteDbSet, String, Object) Selects the specified set. Declaration public IEnumerable<TEntity> Select<TEntity>(ILiteDbSet set, string whereText, object whereParams = null) Parameters Type Name Description ILiteDbSet set The set. String whereText The where text. Object whereParams The where parameters. Returns Type Description IEnumerable <TEntity> An enumerable of type of the Entity. Type Parameters Name Description TEntity The type of the entity. SelectAsync<TEntity>(ILiteDbSet, String, Object) Selects the asynchronous. Declaration public Task<IEnumerable<TEntity>> SelectAsync<TEntity>(ILiteDbSet set, string whereText, object whereParams = null) Parameters Type Name Description ILiteDbSet set The set. String whereText The where text. Object whereParams The where parameters. Returns Type Description Task < IEnumerable <TEntity>> A Task with a enumerable of type of the entity. Type Parameters Name Description TEntity The type of the entity. Set(Type) Sets the specified entity type. Declaration public ILiteDbSet Set(Type entityType) Parameters Type Name Description Type entityType Type of the entity. Returns Type Description ILiteDbSet A non-generic liteDbSet instance for access to entities of the given type in the context and the underlying store. Exceptions Type Condition ArgumentOutOfRangeException Throws an ArgumentOutOfRangeException. Set<TEntity>() Sets this instance. Declaration public ILiteDbSet Set<TEntity>() Returns Type Description ILiteDbSet A liteDbSet instance for access to entities of the given type in the context and the underlying store. Type Parameters Name Description TEntity Entity type. Update(Object) Updates the specified entity without triggering events. Declaration public int Update(object entity) Parameters Type Name Description Object entity The entity. Returns Type Description Int32 The affected rows count. UpdateAsync(Object) Updates the asynchronous without triggering events. Declaration public Task<int> UpdateAsync(object entity) Parameters Type Name Description Object entity The entity. Returns Type Description Task < Int32 > A task with he affected rows count. VaccuumDatabaseAsync() Vacuums the database asynchronously. Declaration public Task VaccuumDatabaseAsync() Returns Type Description Task A Task that represent the Execution of the Vacuum command. Events OnDatabaseCreated Occurs when [on database created]. Declaration public event EventHandler OnDatabaseCreated Event Type Type Description EventHandler Implements System.IDisposable See Also IDisposable Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.Labs.LiteLib.LiteModel.html": {
    "href": "api/Unosquare.Labs.LiteLib.LiteModel.html",
    "title": "Class LiteModel | Unosquare LiteLib",
    "keywords": "Class LiteModel Base model class for ISQLiteEntity. Inherit from this model if you don't want to implement the RowId property. Inheritance Object LiteModel Implements ILiteModel Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.Labs.LiteLib Syntax public abstract class LiteModel : ILiteModel Properties RowId Gets or sets the native SQLite row identifier. Declaration public long RowId { get; set; } Property Value Type Description Int64 Implements ILiteModel Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.Labs.LiteLib.NotMappedAttribute.html": {
    "href": "api/Unosquare.Labs.LiteLib.NotMappedAttribute.html",
    "title": "Class NotMappedAttribute | Unosquare LiteLib",
    "keywords": "Class NotMappedAttribute Attribute for ignored properties. Inheritance Object Attribute NotMappedAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.Labs.LiteLib Syntax [AttributeUsage(AttributeTargets.Property)] public class NotMappedAttribute : Attribute, _Attribute Implements System.Runtime.InteropServices._Attribute See Also Attribute Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.Labs.LiteLib.TableAttribute.html": {
    "href": "api/Unosquare.Labs.LiteLib.TableAttribute.html",
    "title": "Class TableAttribute | Unosquare LiteLib",
    "keywords": "Class TableAttribute Attribute to represent a LiteLib Entity. Inheritance Object Attribute TableAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.Labs.LiteLib Syntax [AttributeUsage(AttributeTargets.Class)] public class TableAttribute : Attribute, _Attribute Constructors TableAttribute(String) Initializes a new instance of the TableAttribute class. Declaration public TableAttribute(string name) Parameters Type Name Description String name The name. Properties Name Gets or sets the table name. Declaration public string Name { get; } Property Value Type Description String The table name. Implements System.Runtime.InteropServices._Attribute See Also Attribute Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "README.html": {
    "href": "README.html",
    "title": "LiteLib | Unosquare LiteLib",
    "keywords": "LiteLib A cool little wrapper for SQLite based on Dapper from Unosquare Labs -- It's also free and MIT-licensed ⭐ Please star this project if you find it useful! LiteLib is a library that helps you get the job done quickly and easily by defining POCO classes and turns those classes into SQLite-mapped tables. You define a database context and LiteLib will automatically create the necessary SQLite tables for your context. You will then be able to easily query, insert, update or delete records from the database tables via the database context you just defined. LiteLib is not intended to be a replacement for Entity Framework, but rather a lighter alternative that saves you the work of creating tables, managing connection instances, logging SQL commands, and still allows you to use Dapper-style querying. So, if you like Entity Framework, but you prefer the speed of Dapper, and you are using SQLite for your project, then we hope you'll love LiteLib! Stuff that LiteLib does very well : Creates your database files and tables that map to classes and properties of your objects. Automatically gives you access to predefined SELECT , UPDATE , INSERT and DELETE commands for each of your classes. Automatically provides you with a simple and extensible data access layer. Automatically manages connection instances. Provides you with a log of SQL commands executed against your database file. Stuff that LiteLib does not cover: Migrations of any kind. You'll have to drop and recreate the DB file if your schema changes or migrate it manually. Navigation properties or relationships. You'll have to implement and ensure consistency of data relations manually -- which BTW, it's not hard at all and lets you write faster, lighter code. Automatic transactions or changesets. You'll have to BeginTransaction and Commit manually. The Data context class you define simply exposes the underlying Dapper connection. Installation You can install LiteLib via NuGet Package Manager as follows: PM> Install-Package LiteLib LiteLib doesn't contains any SQLite interop or library, so you need to add it to your project. You can choose to a general bundle or custom bundle. PM> Install-Package SQLitePCLRaw.bundle_green If you are targeting only Linux environments (only .NET Core), you can use the sqlite3 bundle. PM> Install-Package SQLitePCLRaw.bundle_e_sqlite3 Mono Users - If you are using Mono please target to NET452. Usage We designed LiteLib to be extremely easy to use. There are 3 steps you need to follow. Create your model classes. All model classes must extend from LiteModel . There are a few class and property attributes that LiteLib understands. See the examples below. Create your context class. It must extend LiteDbContext , and it must expose your LiteDbSet classes Use your context class. An example provided in the following section. Example Create your model class. Use the Table attribute to specify the name of the table you want to map your model to. Also, note we inherit from LiteModel . If you wish to create a unique index on a column, use the LiteUnique attribute on a property. If you wish to index a column, then simply use the LiteIndex attribute. Please note properties with complex datatypes will not be mapped to the database. namespace Models { using System; using System.ComponentModel.DataAnnotations.Schema; using Unosquare.Labs.LiteLib; [Table(\"ClientAccounts\")] public class ClientAccount : LiteModel { [LiteUnique] public string Username { get; set; } public string Password { get; set; } [LiteIndex] public bool IsUsernameIP { get; set; } [LiteIndex] public long RelayServerId { get; set; } public DateTime DateCreatedUtc { get; set; } public DateTime LastAccessDateUtc { get; set; } public DateTime? LockedOutDateUtc { get; set; } public int FailedLoginAttempts { get; set; } } } Next, create your database context class. Extend LiteDbContext and expose any number of tables via properties of the generic type LiteDbSet<> . A context should always be disposable so the recommendation is to query your database inside a using block of statements. namespace Models { using Labs.LiteLib; public class AppDbContext : LiteDbContext { public AppDbContext() : base(\"mydbfile.db\") { // map this context to the database file mydbfile.db } public virtual LiteDbSet<ClientAccount> ClientAccounts { get; set; } } } Finally, use your database context class. For example, to query your database by username asynchronously you can just do the following: using (var db = new AppDbContext()) { var accounts = await db.ClientAccounts.SelectAsync( $\"{nameof(ClientAccount.Username)} = @{nameof(ClientAccount.Username)}\", new { Username = \"someuser\" }); } At this point, it should be easy for you to see that you can easily extend your data access logic via extension methods or by extending the LiteDbSet<> class and exposing it as a property in your database context class. That's it! Happy coding!"
  },
  "api/Unosquare.Labs.LiteLib.ILiteModel.html": {
    "href": "api/Unosquare.Labs.LiteLib.ILiteModel.html",
    "title": "Interface ILiteModel | Unosquare LiteLib",
    "keywords": "Interface ILiteModel Provides minimum contract on which a class can be considered a model for a SQLite entity set. Namespace : Unosquare.Labs.LiteLib Syntax public interface ILiteModel Properties RowId Gets or sets the native SQLite row identifier. Declaration long RowId { get; set; } Property Value Type Description Int64 Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.Labs.LiteLib.LiteDbSet-1.html": {
    "href": "api/Unosquare.Labs.LiteLib.LiteDbSet-1.html",
    "title": "Class LiteDbSet<T> | Unosquare LiteLib",
    "keywords": "Class LiteDbSet<T> Represents a ILiteDbSet implementation. Inheritance Object LiteDbSet<T> Implements ILiteDbSet <T> ILiteDbSet Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.Labs.LiteLib Syntax public class LiteDbSet<T> : ILiteDbSet<T>, ILiteDbSet where T : ILiteModel, new() Type Parameters Name Description T The type of entity. Constructors LiteDbSet() Initializes a new instance of the LiteDbSet<T> class. Declaration public LiteDbSet() Properties AnyDefinition Gets any definition. Declaration public string AnyDefinition { get; } Property Value Type Description String Context Gets or sets the parent set context. Declaration public LiteDbContext Context { get; set; } Property Value Type Description LiteDbContext DeleteDefinition Gets the delete command definition. Declaration public string DeleteDefinition { get; } Property Value Type Description String DeleteDefinitionWhere Gets the delete definition where. Declaration public string DeleteDefinitionWhere { get; } Property Value Type Description String EntityType Gets or sets the type of the entity. Declaration public Type EntityType { get; set; } Property Value Type Description Type InsertDefinition Gets the insert command definition. Declaration public string InsertDefinition { get; } Property Value Type Description String PropertyNames Gets or sets the property names. Declaration public string[] PropertyNames { get; } Property Value Type Description String [] SelectDefinition Gets the select command definition. Declaration public string SelectDefinition { get; } Property Value Type Description String TableDefinition Gets the table definition. Declaration public string TableDefinition { get; } Property Value Type Description String TableName Gets the name of the data-backing table. Declaration public string TableName { get; } Property Value Type Description String UpdateDefinition Gets the update command definition. Declaration public string UpdateDefinition { get; } Property Value Type Description String Methods Any() Check if the row exist in the table. Declaration public bool Any() Returns Type Description Boolean true if the query contains data, otherwise false . Any(String, Object) Check if the row exist in the table. Declaration public bool Any(string whereText, object whereParams = null) Parameters Type Name Description String whereText The where text. Object whereParams The where parameters. Returns Type Description Boolean true if the query contains data, otherwise false . AnyAsync() Check asynchronous if the table contains data. Declaration public Task<bool> AnyAsync() Returns Type Description Task < Boolean > A Task<TResult> representing the result of the asynchronous operation. AnyAsync(String, Object) Check asynchronous if the row exist in the table. Declaration public Task<bool> AnyAsync(string whereText, object whereParams = null) Parameters Type Name Description String whereText The where text. Object whereParams The where parameters. Returns Type Description Task < Boolean > A Task<TResult> representing the result of the asynchronous operation. Count() Counts the total number of rows in the table. Declaration public int Count() Returns Type Description Int32 The total number of rows. Count(String, Object) Provides and asynchronous counterpart to the Count method. Declaration public int Count(string whereText, object whereParams = null) Parameters Type Name Description String whereText The where text. Object whereParams The where parameters. Returns Type Description Int32 The total number of rows. CountAsync() Provides and asynchronous counterpart to the Count method. Declaration public Task<int> CountAsync() Returns Type Description Task < Int32 > A Task with the total number of rows. CountAsync(String, Object) Provides and asynchronous counterpart to the Count method. Declaration public Task<int> CountAsync(string whereText, object whereParams = null) Parameters Type Name Description String whereText The where text. Object whereParams The where parameters. Returns Type Description Task < Int32 > A Task with the total number of rows. Delete(T) Declaration public int Delete(T entity) Parameters Type Name Description T entity Returns Type Description Int32 Delete(String, Object) Declaration public int Delete(string whereText, object whereParams = null) Parameters Type Name Description String whereText Object whereParams Returns Type Description Int32 DeleteAsync(T) Declaration public Task<int> DeleteAsync(T entity) Parameters Type Name Description T entity Returns Type Description Task < Int32 > DeleteAsync(String, Object) Declaration public Task<int> DeleteAsync(string whereText, object whereParams = null) Parameters Type Name Description String whereText Object whereParams Returns Type Description Task < Int32 > FirstOrDefault(String, Object) Declaration public T FirstOrDefault(string fieldName, object fieldValue) Parameters Type Name Description String fieldName Object fieldValue Returns Type Description T FirstOrDefaultAsync(String, Object) Declaration public Task<T> FirstOrDefaultAsync(string fieldName, object fieldValue) Parameters Type Name Description String fieldName Object fieldValue Returns Type Description Task <T> Insert(T) Declaration public int Insert(T entity) Parameters Type Name Description T entity Returns Type Description Int32 InsertAsync(T) Declaration public Task<int> InsertAsync(T entity) Parameters Type Name Description T entity Returns Type Description Task < Int32 > InsertRange(IEnumerable<T>) Declaration public void InsertRange(IEnumerable<T> entities) Parameters Type Name Description IEnumerable <T> entities Select(String, Object) Declaration public IEnumerable<T> Select(string whereText, object whereParams = null) Parameters Type Name Description String whereText Object whereParams Returns Type Description IEnumerable <T> SelectAll() Declaration public IEnumerable<T> SelectAll() Returns Type Description IEnumerable <T> SelectAllAsync() Declaration public Task<IEnumerable<T>> SelectAllAsync() Returns Type Description Task < IEnumerable <T>> SelectAsync(String, Object) Declaration public Task<IEnumerable<T>> SelectAsync(string whereText, object whereParams = null) Parameters Type Name Description String whereText Object whereParams Returns Type Description Task < IEnumerable <T>> Single(Int64) Declaration public T Single(long rowId) Parameters Type Name Description Int64 rowId Returns Type Description T SingleAsync(Int64) Declaration public Task<T> SingleAsync(long rowId) Parameters Type Name Description Int64 rowId Returns Type Description Task <T> Update(T) Declaration public int Update(T entity) Parameters Type Name Description T entity Returns Type Description Int32 UpdateAsync(T) Declaration public Task<int> UpdateAsync(T entity) Parameters Type Name Description T entity Returns Type Description Task < Int32 > Events OnAfterDelete Occurs when [on after delete]. Declaration public event EventHandler<EntityEventArgs<T>> OnAfterDelete Event Type Type Description EventHandler < EntityEventArgs <T>> OnAfterInsert Occurs when [on after insert]. Declaration public event EventHandler<EntityEventArgs<T>> OnAfterInsert Event Type Type Description EventHandler < EntityEventArgs <T>> OnAfterUpdate Occurs when [on after update]. Declaration public event EventHandler<EntityEventArgs<T>> OnAfterUpdate Event Type Type Description EventHandler < EntityEventArgs <T>> OnBeforeDelete Occurs when [on before delete]. Declaration public event EventHandler<EntityEventArgs<T>> OnBeforeDelete Event Type Type Description EventHandler < EntityEventArgs <T>> OnBeforeInsert Occurs when [on before insert]. Declaration public event EventHandler<EntityEventArgs<T>> OnBeforeInsert Event Type Type Description EventHandler < EntityEventArgs <T>> OnBeforeUpdate Occurs when [on before update]. Declaration public event EventHandler<EntityEventArgs<T>> OnBeforeUpdate Event Type Type Description EventHandler < EntityEventArgs <T>> Implements ILiteDbSet<T> ILiteDbSet See Also ILiteDbSet <T> Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.Labs.LiteLib.LiteIndexAttribute.html": {
    "href": "api/Unosquare.Labs.LiteLib.LiteIndexAttribute.html",
    "title": "Class LiteIndexAttribute | Unosquare LiteLib",
    "keywords": "Class LiteIndexAttribute Hints the DDL generator that an index needs to be created. Inheritance Object Attribute LiteIndexAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.Labs.LiteLib Syntax public class LiteIndexAttribute : Attribute, _Attribute Implements System.Runtime.InteropServices._Attribute See Also Attribute Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.Labs.LiteLib.LiteUniqueAttribute.html": {
    "href": "api/Unosquare.Labs.LiteLib.LiteUniqueAttribute.html",
    "title": "Class LiteUniqueAttribute | Unosquare LiteLib",
    "keywords": "Class LiteUniqueAttribute Hints the DDL generator that a UNIQUE index needs to be created. Inheritance Object Attribute LiteUniqueAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.Labs.LiteLib Syntax public class LiteUniqueAttribute : Attribute, _Attribute Implements System.Runtime.InteropServices._Attribute See Also Attribute Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.Labs.LiteLib.StringLengthAttribute.html": {
    "href": "api/Unosquare.Labs.LiteLib.StringLengthAttribute.html",
    "title": "Class StringLengthAttribute | Unosquare LiteLib",
    "keywords": "Class StringLengthAttribute Attribute for string length. Inheritance Object Attribute StringLengthAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.Labs.LiteLib Syntax [AttributeUsage(AttributeTargets.Property)] public class StringLengthAttribute : Attribute, _Attribute Constructors StringLengthAttribute(Int32) Initializes a new instance of the StringLengthAttribute class. Declaration public StringLengthAttribute(int maximumLength) Parameters Type Name Description Int32 maximumLength The maximum length. Properties MaximumLength Gets the maximum length. Declaration public int MaximumLength { get; } Property Value Type Description Int32 The maximum length. Implements System.Runtime.InteropServices._Attribute See Also Attribute Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.Labs.LiteLib.html": {
    "href": "api/Unosquare.Labs.LiteLib.html",
    "title": "Namespace Unosquare.Labs.LiteLib | Unosquare LiteLib",
    "keywords": "Namespace Unosquare.Labs.LiteLib Classes EntityEventArgs<T> Represents a Entity EventArg. Extensions Extension methods. LiteDbContext A base class containing all the functionality to perform data operations on Entity Sets. LiteDbSet<T> Represents a ILiteDbSet implementation. LiteIndexAttribute Hints the DDL generator that an index needs to be created. LiteModel Base model class for ISQLiteEntity. Inherit from this model if you don't want to implement the RowId property. LiteUniqueAttribute Hints the DDL generator that a UNIQUE index needs to be created. NotMappedAttribute Attribute for ignored properties. StringLengthAttribute Attribute for string length. TableAttribute Attribute to represent a LiteLib Entity. Interfaces ILiteDbSet Provides basic DDL and CRUD command definitions and a DI-supplied Context. ILiteDbSet<T> Provides typed access to querying the database. ILiteModel Provides minimum contract on which a class can be considered a model for a SQLite entity set. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.Labs.LiteLib.EntityEventArgs-1.html": {
    "href": "api/Unosquare.Labs.LiteLib.EntityEventArgs-1.html",
    "title": "Class EntityEventArgs<T> | Unosquare LiteLib",
    "keywords": "Class EntityEventArgs<T> Represents a Entity EventArg. Inheritance Object EventArgs EntityEventArgs<T> Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.Labs.LiteLib Syntax public class EntityEventArgs<T> : EventArgs where T : ILiteModel Type Parameters Name Description T The type of LiteModel. Constructors EntityEventArgs(T, ILiteDbSet<T>) Initializes a new instance of the EntityEventArgs<T> class. Declaration public EntityEventArgs(T entity, ILiteDbSet<T> liteDbSet) Parameters Type Name Description T entity The entity. ILiteDbSet <T> liteDbSet The database set. Properties Cancel Gets or sets a value indicating whether this EntityEventArgs<T> is cancel. Declaration public bool Cancel { get; set; } Property Value Type Description Boolean true if cancel; otherwise, false . DbSet Gets or sets the database set. Declaration public ILiteDbSet<T> DbSet { get; protected set; } Property Value Type Description ILiteDbSet <T> The database set. Entity Gets or sets the entity. Declaration public T Entity { get; protected set; } Property Value Type Description T The entity. See Also EventArgs Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.Labs.LiteLib.Extensions.html": {
    "href": "api/Unosquare.Labs.LiteLib.Extensions.html",
    "title": "Class Extensions | Unosquare LiteLib",
    "keywords": "Class Extensions Extension methods. Inheritance Object Extensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.Labs.LiteLib Syntax public static class Extensions Methods GetTypeMapping(Type) Gets the type mapping. Declaration public static string GetTypeMapping(this Type propertyType) Parameters Type Name Description Type propertyType Type of the property. Returns Type Description String A property type of the mapping. ToSQLiteUtcDate(DateTime) Transform a DateTime to a SQLite UTC date. Declaration public static DateTime ToSQLiteUtcDate(this DateTime utcDate) Parameters Type Name Description DateTime utcDate The UTC date. Returns Type Description DateTime UTC DateTime. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.Labs.LiteLib.ILiteDbSet.html": {
    "href": "api/Unosquare.Labs.LiteLib.ILiteDbSet.html",
    "title": "Interface ILiteDbSet | Unosquare LiteLib",
    "keywords": "Interface ILiteDbSet Provides basic DDL and CRUD command definitions and a DI-supplied Context. Namespace : Unosquare.Labs.LiteLib Syntax public interface ILiteDbSet Properties AnyDefinition Gets any definition. Declaration string AnyDefinition { get; } Property Value Type Description String Context Gets or sets the parent set context. Declaration LiteDbContext Context { get; set; } Property Value Type Description LiteDbContext DeleteDefinition Gets the delete command definition. Declaration string DeleteDefinition { get; } Property Value Type Description String DeleteDefinitionWhere Gets the delete definition where. Declaration string DeleteDefinitionWhere { get; } Property Value Type Description String EntityType Gets or sets the type of the entity. Declaration Type EntityType { get; set; } Property Value Type Description Type InsertDefinition Gets the insert command definition. Declaration string InsertDefinition { get; } Property Value Type Description String SelectDefinition Gets the select command definition. Declaration string SelectDefinition { get; } Property Value Type Description String TableDefinition Gets the table definition. Declaration string TableDefinition { get; } Property Value Type Description String TableName Gets the name of the data-backing table. Declaration string TableName { get; } Property Value Type Description String UpdateDefinition Gets the update command definition. Declaration string UpdateDefinition { get; } Property Value Type Description String Methods Any() Check if the row exist in the table. Declaration bool Any() Returns Type Description Boolean true if the query contains data, otherwise false . Any(String, Object) Check if the row exist in the table. Declaration bool Any(string whereText, object whereParams = null) Parameters Type Name Description String whereText The where text. Object whereParams The where parameters. Returns Type Description Boolean true if the query contains data, otherwise false . AnyAsync() Check asynchronous if the table contains data. Declaration Task<bool> AnyAsync() Returns Type Description Task < Boolean > A Task<TResult> representing the result of the asynchronous operation. AnyAsync(String, Object) Check asynchronous if the row exist in the table. Declaration Task<bool> AnyAsync(string whereText, object whereParams = null) Parameters Type Name Description String whereText The where text. Object whereParams The where parameters. Returns Type Description Task < Boolean > A Task<TResult> representing the result of the asynchronous operation. Count() Counts the total number of rows in the table. Declaration int Count() Returns Type Description Int32 The total number of rows. Count(String, Object) Provides and asynchronous counterpart to the Count method. Declaration int Count(string whereText, object whereParams = null) Parameters Type Name Description String whereText The where text. Object whereParams The where parameters. Returns Type Description Int32 The total number of rows. CountAsync() Provides and asynchronous counterpart to the Count method. Declaration Task<int> CountAsync() Returns Type Description Task < Int32 > A Task with the total number of rows. CountAsync(String, Object) Provides and asynchronous counterpart to the Count method. Declaration Task<int> CountAsync(string whereText, object whereParams = null) Parameters Type Name Description String whereText The where text. Object whereParams The where parameters. Returns Type Description Task < Int32 > A Task with the total number of rows. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  }
}